# Autogenerated from a Treetop grammar. Edits may be lost.


module Fields
  module FieldsGrammar
    include Treetop::Runtime

    def root
      @root ||= :fields
    end

    module Fields0
      def fields
        elements[1]
      end
    end

    module Fields1
    end

    module Fields2
      def node_value(node)
        return if node.terminal?
        if node.respond_to?(:value)
          node.value
        else
          node.elements.map { |e| node_value(e) }
        end
      end

      def value
        elements.map { |e|
          node_value(e)
        }.flatten.compact
      end
    end

    def _nt_fields
      start_index = index
      if node_cache[:fields].has_key?(index)
        cached = node_cache[:fields][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      i1 = index
      r2 = _nt_collection
      if r2
        r1 = r2
      else
        r3 = _nt_field
        if r3
          r1 = r3
        else
          @index = i1
          r1 = nil
        end
      end
      s0 << r1
      if r1
        s4, i4 = [], index
        loop do
          i5, s5 = index, []
          if has_terminal?(',', false, index)
            r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(',')
            r6 = nil
          end
          s5 << r6
          if r6
            r7 = _nt_fields
            s5 << r7
          end
          if s5.last
            r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
            r5.extend(Fields0)
          else
            @index = i5
            r5 = nil
          end
          if r5
            s4 << r5
          else
            break
          end
        end
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        s0 << r4
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(Fields1)
        r0.extend(Fields2)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:fields][start_index] = r0

      r0
    end

    module Collection0
      def field
        elements[0]
      end

      def fields
        elements[2]
      end

    end

    module Collection1
      def value
        result = {}
        result[elements[0].value] = elements[2].value
        result
      end
    end

    def _nt_collection
      start_index = index
      if node_cache[:collection].has_key?(index)
        cached = node_cache[:collection][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_field
      s0 << r1
      if r1
        if has_terminal?('(', false, index)
          r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('(')
          r2 = nil
        end
        s0 << r2
        if r2
          r3 = _nt_fields
          s0 << r3
          if r3
            if has_terminal?(')', false, index)
              r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(')')
              r4 = nil
            end
            s0 << r4
          end
        end
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(Collection0)
        r0.extend(Collection1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:collection][start_index] = r0

      r0
    end

    module Field0
      def alpha
        elements[0]
      end

    end

    module Field1
      def value
        text_value
      end
    end

    def _nt_field
      start_index = index
      if node_cache[:field].has_key?(index)
        cached = node_cache[:field][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_alpha
      s0 << r1
      if r1
        s2, i2 = [], index
        loop do
          r3 = _nt_alpha_under
          if r3
            s2 << r3
          else
            break
          end
        end
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        s0 << r2
      end
      if s0.last
        r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
        r0.extend(Field0)
        r0.extend(Field1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:field][start_index] = r0

      r0
    end

    def _nt_alpha
      start_index = index
      if node_cache[:alpha].has_key?(index)
        cached = node_cache[:alpha][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      if has_terminal?('\G[a-zA-Z]', true, index)
        r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        r0 = nil
      end

      node_cache[:alpha][start_index] = r0

      r0
    end

    def _nt_alpha_under
      start_index = index
      if node_cache[:alpha_under].has_key?(index)
        cached = node_cache[:alpha_under][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_alpha
      if r1
        r0 = r1
      else
        if has_terminal?('_', false, index)
          r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('_')
          r2 = nil
        end
        if r2
          r0 = r2
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:alpha_under][start_index] = r0

      r0
    end

  end

  class FieldsGrammarParser < Treetop::Runtime::CompiledParser
    include FieldsGrammar
  end

end
