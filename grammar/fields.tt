module Fields
  grammar FieldsGrammar
    rule fields
      (collection / field) (',' fields)* {
        def node_value(node)
          return if node.terminal?
          if node.respond_to?(:value)
            node.value
          else
            node.elements.map { |e| node_value(e) }
          end
        end

        def value
          elements.map { |e|
            node_value(e)
          }.flatten.compact
        end
      }
    end

    rule collection
      field '(' fields ')' {
        def value
          result = {}
          result[elements[0].value] = elements[2].value
          result
        end
      }
    end

    rule field
      alpha alpha_under* {
        def value
          text_value
        end
      }
    end

    rule alpha
      [a-zA-Z]
    end

    rule alpha_under
      alpha / '_'
    end
  end
end
